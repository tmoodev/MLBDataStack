DROP PROCEDURE IF EXISTS UpdateFactPitch;

DELIMITER $$

CREATE PROCEDURE UpdateFactPitch()
BEGIN
    INSERT INTO baseball.Pitches (
        SequenceKey,
    	GameKey, 
        AtBat, 
        PitchNumber, 
        BatterKey, 
        PitcherKey, 
        PitchType, 
        ReleaseSpeed, 
        SpinAxis, 
        PlateX, 
        PlateY, 
        PlateZ, 
        InitVeloX, 
        InitVeloY, 
        InitVeloZ, 
        AccelX, 
        AccelY, 
        AccelZ,
        HomeTeamScore, 
        AwayTeamScore, 
        Balls, 
        Strikes, 
        OutsWhenUp,
        PitchOutcome,
        Zone,
        Event,
        HitLocation,
        bb_type,
        pfx_x,
        pfx_z,
        RunnerOn3,
        RunnerOn2,
        RunnerOn1,
        hc_x,
        hc_y,
        sz_top,
        sz_bot,
        HitDistance,
        LaunchSpeed,
        LaunchAngle,
        ReleaseSpinRate,
        ReleaseExtension,
        WOBA,
        WOBADenom,
        BABIP,
        ISO,
        LaunchSpeedAngle,
        BatScore,
        BatSpeed,
        SwingLength,
        EstimatedSlgSA,
        InsertTime
    )
    SELECT
    	UUID() AS SequenceKey,
        pd.game_pk AS GameKey,
        pd.at_bat_number AS AtBat, 
        pd.pitch_number AS PitchNumber, 
        pd.batter AS BatterKey, 
        pd.pitcher AS PitcherKey, 
        pd.pitch_type AS PitchType,
        pd.release_speed AS ReleaseSpeed,
        pd.spin_axis AS SpinAxis,
        pd.plate_x AS PlateX, 
        NULL AS PlateY,  -- Placeholder if PlateY doesn't exist in pd
        pd.plate_z AS PlateZ, 
        pd.vx0 AS InitVeloX,
        pd.vy0 AS InitVeloY,
        pd.vz0 AS InitVeloZ, 
        pd.ax AS AccelX, 
        pd.ay AS AccelY, 
        pd.az AS AccelZ,
        pd.home_score AS HomeTeamScore, 
        pd.away_score AS AwayTeamScore, 
        pd.balls AS Balls, 
        pd.strikes AS Strikes, 
        pd.outs_when_up AS OutsWhenUp,
        pd.description AS PitchOutcome,
        pd.`zone` AS Zone,
        pd.events AS Event,
        pd.hit_location AS HitLocation,
        pd.bb_type,
        pd.pfx_x,
        pd.pfx_z,
        pd.on_3b AS RunnerOn3,
        pd.on_2b AS RunnerOn2,
        pd.on_1b AS RunnerOn1,
        pd.hc_x,
        pd.hc_y,
        pd.sz_top,
        pd.sz_bot,
        pd.hit_distance_sc AS HitDistance,
        pd.launch_speed AS LaunchSpeed,
        pd.launch_angle AS LaunchAngle,
        pd.release_spin_rate AS ReleaseSpinRate,
        pd.release_extension AS ReleaseExtension,
        pd.woba_value AS WOBA,
        pd.woba_denom AS WOBADenom,
        pd.babip_value AS BABIP,
        pd.iso_value AS ISO,
        pd.launch_speed_angle AS LaunchSpeedAngle,
        pd.bat_score AS BatScore,
        pd.bat_speed AS BatSpeed,
        pd.swing_length AS SwingLength,
        pd.estimated_slg_using_speedangle AS EstimatedSlgSA,
        pd.insert_time AS InsertTime
    FROM baseball.PitchData pd
    WHERE pd.pitch_type IS NOT NULL
      AND pd.release_speed IS NOT NULL;
END $$

DELIMITER ;
